generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id              String  @id @default(cuid()) @map("_id")
  slug            String  @unique
  title           String
  mainImage       String? // Main image URL
  price           Int     @default(0)
  rating          Float   @default(0.0) // Average rating
  description     String
  manufacturer    String
  inStock         Int     @default(1) // Total available stock
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  customerOrders  customer_order_product[]
  Wishlist        Wishlist[]
  images          Image[]  @relation("ProductImages") // Relation to multiple images
  reviews         Review[] // Relation to reviews
  variants        ProductVariant[] // Variants for size, weight, color, etc.
  additionalItems AdditionalItem[] // Customizable options like sauces, etc.
}

model Review {
  id        String  @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String
  userName  String?
  userId    String  // Reference to the user who made the review
  rating    Int     // Rating for the product
  comment   String? // Optional comment from the user
  images    Json?   // Store an array of image URLs in JSON format
}

model ProductVariant {
  id        String  @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String
  variantstock Int?
  shipingCost  String?
  variantPrice String?
  size      String? // Size of the product (e.g., small, medium, large)
  weight    Float?  // Weight of the product (used for shipping)
  color     String? // Color variant if applicable
}

model AdditionalItem { 
  id        String  @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String
  name      String  // Name of the additional item (e.g., sauce, chili)
  price     Int     // Price of the additional item
}



model Image {
  id        String   @id @default(cuid()) @map("_id")
  url       String
 public_id  String
  alt       String?  // Optional alt text
  caption   String?  // Optional caption
  productId String
  product   Product  @relation("ProductImages", fields: [productId], references: [id])
}


model User {
  id       String   @id @default(cuid()) @map("_id")
  email    String   @unique
  password String?
  role     String?  @default("user")
  Wishlist Wishlist[]
}

model Customer_order {
  id         String   @id @default(cuid()) @map("_id")
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  address     String
  apartment   String
  postalCode  String
  dateTime    DateTime?                @default(now())
  status      String
  city        String
  country     String
  orderNotice String?
  total       Int
  products    customer_order_product[]
}

model customer_order_product {
  id              String   @id @default(cuid()) @map("_id")
  customerOrder   Customer_order @relation(fields: [customerOrderId], references: [id])
  customerOrderId String
  product         Product        @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
}

model Category {
  id       String   @id @default(cuid()) @map("_id")
  name     String   @unique
  slug     String?  @unique
  products Product[] // Define a one-to-many relationship
}

model Wishlist {
  id        String   @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
